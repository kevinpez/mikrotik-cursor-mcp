name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install pytest pytest-cov pytest-asyncio pytest-mock black flake8 mypy
    
    - name: Lint with flake8
      run: |
        flake8 src/mcp_mikrotik/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/mcp_mikrotik/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check src/mcp_mikrotik/
    
    - name: Type check with mypy
      run: |
        mypy src/mcp_mikrotik/ --ignore-missing-imports
    
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ --cov=mcp_mikrotik --cov-report=xml --cov-report=term-missing
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ --junitxml=test-results.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  container-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install pytest pytest-asyncio
    
    - name: Start RouterOS container
      run: |
        cd routeros-docker
        docker-compose up -d
        sleep 30
    
    - name: Run container tests
      run: |
        python -m pytest tests/integration/test_container_integration.py -v
    
    - name: Stop RouterOS container
      if: always()
      run: |
        cd routeros-docker
        docker-compose down -v

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install bandit safety
    
    - name: Run security scan with bandit
      run: |
        bandit -r src/mcp_mikrotik/ -f json -o bandit-report.json || true
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install pytest-benchmark
    
    - name: Run performance tests
      run: |
        python -m pytest tests/performance/ --benchmark-only --benchmark-save=benchmark_results
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: .benchmarks/

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: mikrotik-cursor-mcp:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm mikrotik-cursor-mcp:test python -c "import mcp_mikrotik; print('Docker image test passed')"

  multi-site-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        cd multi-site-manager
        pip install -r requirements.txt
    
    - name: Run multi-site manager tests
      run: |
        cd multi-site-manager
        python -m pytest tests/ -v

  documentation:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install sphinx sphinx-rtd-theme
    
    - name: Build documentation
      run: |
        sphinx-build -b html docs/ docs/_build/html
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/

  notify:
    runs-on: ubuntu-latest
    needs: [test, container-test, security, performance, build, docker, multi-site-test, documentation]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.container-test.result == 'success' && needs.security.result == 'success' && needs.performance.result == 'success' && needs.build.result == 'success' && needs.docker.result == 'success' && needs.multi-site-test.result == 'success' && needs.documentation.result == 'success' }}
      run: |
        echo "✅ All CI checks passed successfully!"
    
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.container-test.result == 'failure' || needs.security.result == 'failure' || needs.performance.result == 'failure' || needs.build.result == 'failure' || needs.docker.result == 'failure' || needs.multi-site-test.result == 'failure' || needs.documentation.result == 'failure' }}
      run: |
        echo "❌ Some CI checks failed. Please check the logs."
        exit 1

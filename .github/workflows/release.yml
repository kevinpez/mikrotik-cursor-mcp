name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v4.8.1)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
        pip install -r requirements.txt
    
    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        VERSION_NUMBER="${VERSION#v}"
        sed -i "s/version = \".*\"/version = \"$VERSION_NUMBER\"/" pyproject.toml
    
    - name: Run tests
      run: |
        pip install pytest pytest-cov pytest-asyncio pytest-mock
        python -m pytest tests/ --cov=mcp_mikrotik --cov-report=xml --junitxml=test-results.xml
    
    - name: Build package
      run: |
        python -m build
    
    - name: Build Docker image
      run: |
        docker build -t mikrotik-cursor-mcp:${{ steps.version.outputs.version }} .
        docker tag mikrotik-cursor-mcp:${{ steps.version.outputs.version }} mikrotik-cursor-mcp:latest
    
    - name: Test Docker image
      run: |
        docker run --rm mikrotik-cursor-mcp:${{ steps.version.outputs.version }} python -c "import mcp_mikrotik; print('Docker image test passed')"
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREV_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s" --max-count=20)
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## What's New in ${{ steps.version.outputs.version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ### From PyPI
          ```bash
          pip install mikrotik-cursor-mcp==${{ steps.version.outputs.version }}
          ```
          
          ### From Source
          ```bash
          git clone https://github.com/kevinpez/mikrotik-cursor-mcp.git
          cd mikrotik-cursor-mcp
          git checkout ${{ steps.version.outputs.version }}
          pip install -e .
          ```
          
          ### Docker
          ```bash
          docker pull ghcr.io/kevinpez/mikrotik-cursor-mcp:${{ steps.version.outputs.version }}
          ```
          
          ## Documentation
          
          - [Quick Start Guide](https://github.com/kevinpez/mikrotik-cursor-mcp/blob/${{ steps.version.outputs.version }}/QUICK_START.md)
          - [Natural Language Examples](https://github.com/kevinpez/mikrotik-cursor-mcp/blob/${{ steps.version.outputs.version }}/NATURAL_LANGUAGE_EXAMPLES.md)
          - [Security Guide](https://github.com/kevinpez/mikrotik-cursor-mcp/blob/${{ steps.version.outputs.version }}/SECURITY.md)
          - [Testing Guide](https://github.com/kevinpez/mikrotik-cursor-mcp/blob/${{ steps.version.outputs.version }}/TESTING_GUIDE.md)
          
          ## Full Changelog
          
          ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/mikrotik_cursor_mcp-${{ steps.version.outputs.version }}.tar.gz
        asset_name: mikrotik-cursor-mcp-${{ steps.version.outputs.version }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload wheel asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/mikrotik_cursor_mcp-${{ steps.version.outputs.version }}-py3-none-any.whl
        asset_name: mikrotik-cursor-mcp-${{ steps.version.outputs.version }}-py3-none-any.whl
        asset_content_type: application/zip
    
    - name: Publish to PyPI
      if: github.event_name == 'push'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Push Docker image to GitHub Container Registry
      if: github.event_name == 'push'
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker tag mikrotik-cursor-mcp:${{ steps.version.outputs.version }} ghcr.io/kevinpez/mikrotik-cursor-mcp:${{ steps.version.outputs.version }}
        docker tag mikrotik-cursor-mcp:${{ steps.version.outputs.version }} ghcr.io/kevinpez/mikrotik-cursor-mcp:latest
        docker push ghcr.io/kevinpez/mikrotik-cursor-mcp:${{ steps.version.outputs.version }}
        docker push ghcr.io/kevinpez/mikrotik-cursor-mcp:latest
    
    - name: Update documentation
      if: github.event_name == 'push'
      run: |
        # Update version in README.md
        sed -i "s/version-4\.[0-9]\+\.[0-9]\+/version-${{ steps.version.outputs.version }}/" README.md
        sed -i "s/Version: 4\.[0-9]\+\.[0-9]\+/Version: ${{ steps.version.outputs.version }}/" README.md
        
        # Commit and push changes
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Update version to ${{ steps.version.outputs.version }}" || exit 0
        git push

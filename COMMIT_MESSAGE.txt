feat: Add nested tool architecture to reduce tool count by 90%

BREAKING CHANGE: New nested server implementation reduces tool count from 100+ to 10

This commit introduces a nested/category-based tool architecture that significantly
improves performance and compatibility with MCP clients like Cursor that have
tool count limitations.

Changes:
- Add serve_nested.py: New nested server implementation with 10 category tools
- Add server_nested.py: Entry point for nested server version
- Add README-NESTED.md: Comprehensive documentation for nested version
- Fix routes.py: Improved route removal to handle CIDR addresses properly

Benefits:
- 90% reduction in tool count (100+ â†’ 10 tools)
- Better Cursor compatibility (under 80-tool recommended limit)
- Faster MCP server loading
- Improved organization by logical categories
- Maintains 100% functionality of original version
- Backward compatible - both versions can coexist

Nested Categories:
1. mikrotik_firewall - Firewall filter & NAT rules
2. mikrotik_dhcp - DHCP servers & pools
3. mikrotik_dns - DNS settings & static entries
4. mikrotik_routes - Routing table management
5. mikrotik_ip - IP addresses & pools
6. mikrotik_vlan - VLAN interfaces
7. mikrotik_wireless - Wireless interfaces & clients
8. mikrotik_users - User & group management
9. mikrotik_backup - Backup & restore operations
10. mikrotik_logs - System log management

Usage Example:
  Before: mikrotik_list_filter_rules()
  After:  mikrotik_firewall(action="list_filter_rules")

Testing:
- All 10 nested tools tested and verified working
- Internet connectivity maintained during migration
- Firewall rules active and protecting network
- AWS VPN configuration successfully removed

Tested on:
- RouterOS: 7.x
- Python: 3.11
- MCP Protocol: 1.0
- Cursor: Latest

Co-authored-by: AI Assistant <assistant@cursor.com>

